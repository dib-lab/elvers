from os.path import join

prog = "bowtie2"

ep_params = config[prog]['elvers_params']
logs_dir  = config['elvers_directories']['logs']
prog_params = config[prog]['program_params']

bt2_dir = ep_params['outputs']['outdir']
BASE = config['basename']

# get inputs
assembly_dir  = config['elvers_directories']['outdirs']['assemble']
combine_units = ep_params['outputs']['extensions']['read']['combine_units']

if prog_params.get('input_trimmed', True):
    input_dir = config['elvers_directories']['outdirs']['preprocess']
    ext = '.trim.fq.gz'
    se_ext = 'se'
else:
    input_dir = config['elvers_directories']['outdirs']['input_data']
    ext = '.fq.gz'
    se_ext = '1'

if config.get('ignore_units'):
    combine_units = False

# use if you don't want to collapse technical replicates ("units" column; deseq2 not supported)
def get_sample_no_combine(w):
    readsD = {}
    if not is_single_end(**w): # note, this requires unit to be in outputs!
        readsD['r1'] = join(input_dir, f'{w.sample}_{w.unit}_1{ext}')
        readsD['r2'] = join(input_dir, f'{w.sample}_{w.unit}_2{ext}')
        return readsD
    readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
    return readsD

def get_sample_combine_units(w):
    readsD = {}
    r1,r2,r = [],[],[]
    unit_list = samples.groupby(level=0).get_group(w.sample)['unit'].tolist()
    for unit in unit_list:
        if not is_single_end(w.sample, unit):
            r1+= [join(input_dir, f"{w.sample}_{unit}_1{ext}")]
            r2+= [join(input_dir, f"{w.sample}_{unit}_2{ext}")]
        else:
            r+= [join(input_dir, f"{w.sample}_{unit}{ext}")]
    if r1:
        readsD['r1'] = r1
        readsD['r2'] = r2
    elif r:
        readsD['r'] = r
    return readsD

rule bowtie2_index:
    """
    Index the transcriptome for bowtie2 mapping
    """
    input:
        join(assembly_dir, "{assembly}.fasta")
    output:
        donefile = join(bt2_dir, "{assembly}.bowtie2index.done")
        # touching flag file should work, but doesn't. snakemake issue?
        #touch(join(bt2_dir, "{assembly}.bowtie2index.done")
    message:
        """--- Indexing the transcriptome with Bowtie2 ---"""
    threads: 10
    params:
        index = join(bt2_dir,"{assembly}.bowtie2index"),
        extra = prog_params['index_params'].get('extra', '')
    log:
        join(logs_dir, 'bowtie2/{assembly}_index.log')
    benchmark:
         join(logs_dir, 'bowtie2/{assembly}_index.benchmark')
    conda: "environment.yml"
    script: "bowtie2-index-wrapper.py"

if combine_units:
    rule bowtie2_map_combine_units:
        """
        Map to transcripts with Bowtie2
        """
        input:
            unpack(get_sample_combine_units),
            index_donefile = join(bt2_dir, "{assembly}.bowtie2index.done"),
        output:
            join(bt2_dir,"{sample}_x_{assembly}.bt2.bam"),
        message:
            """--- Mapping to transcripts with Bowtie2 ---"""
        params:
            index = join(bt2_dir, "{assembly}.bowtie2index"),
            extra = prog_params['map_params'].get('extra', '')
        threads: 20
        log: join(logs_dir, 'bowtie2/{sample}_x_{assembly}.log')
        benchmark: join(logs_dir, 'bowtie2/{sample}_x_{assembly}.benchmark')
        conda: "environment.yml"
        script: "bowtie2-map-wrapper.py"
else:
    rule bowtie2_map_no_combine:
        """
        Map to transcripts with Bowtie2 
        """
        input:
            unpack(get_sample_no_combine),
            index_donefile = join(bt2_dir, "{assembly}.bowtie2index.done"),
        output:
            join(bt2_dir,"{sample}_{unit}_x_{assembly}.bt2.bam"),
        message:
            """--- Mapping to transcripts with bowtie2 ---"""
        params:
            index = join(bt2_dir, "{assembly}.bowtie2index"),
            extra = prog_params['map_params'].get('extra', '')
        threads: 20
        log:join(logs_dir, 'bowtie2/{sample}_{unit}_x_{assembly}.bt2.log')
        benchmark:join(logs_dir, 'bowtie2/{sample}_{unit}_x_{assembly}.bt2.benchmark')
        conda: "environment.yml"
        script: "bowtie2-map-wrapper.py"
