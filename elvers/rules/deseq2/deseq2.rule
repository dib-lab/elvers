from os.path import join

logs_dir  = config['elvers_directories']['logs']
assembly_dir= config['elvers_directories']['outdirs']['assemble']
quant_dir= config['elvers_directories']['outdirs']['quantify']

deseq_params = config['deseq2']['program_params']
ep_params = config['deseq2']['elvers_params']
deseq_dir = config['deseq2']['elvers_params']['outputs']['outdir']

# handle "associated_samples" and gene_trans_maps
associated_samples = {}
refs = {}
if 'get_reference' in config.keys():
    refs = config.get('reference_info', {})
if 'assembly_info' in config.keys():
    assemb_info = config['assembly_info']
    refs.update(assemb_info)

gene_trans_map = set()
for ref_ext, ref_info in refs.items():
    if ref_info.get('gene_trans_map'):
        refname = basename + ref_ext
        gene_trans_map.add(refname)

    if ref_info.get('associated_samples'):
        sample_list = ref_info['associated_samples']
        if not ref_ext.startswith('_'):
            ref_ext = '_' + ref_ext
        refname = basename + ref_ext
        associated_samples[refname] = sample_list


def get_deseq2_threads(wildcards=None):
    # https://github.com/snakemake-workflows/rna-seq-star-deseq2
    # https://twitter.com/mikelove/status/918770188568363008
    few_coeffs = False if wildcards is None else len(get_contrast(wildcards)) < 10
    return 1 if len(samples) < 100 or few_coeffs else 6

combine_units = ep_params['outputs'].get('combine_units')
ignore_units =  config.get('ignore_units', False)

def get_quant(w):
    quant =[]
    inputD = {}
    if combine_units and not ignore_units:
        sample_list = set(samples.index.get_level_values('sample'))
        quant = expand(join(quant_dir, "{sample}_x_{assembly}.salmon/quant.sf"), sample = sample_list, **w)
    else:
        # didn't combine units at the salmon level
        for s, u in samples.iterrows():
            sample, unit = u['sample'],u['unit']
            quant+=[join(quant_dir, f"{sample}_{unit}_x_{w.assembly}.salmon/quant.sf")]
    inputD['quant'] = quant
    if w.assembly in gene_trans_map:
        inputD['gene_trans_map'] = join(assembly_dir, f"{w.assembly}.fasta.gene_trans_map")
    return inputD


rule deseq2_init:
    input:
        unpack(get_quant),
    output:
        rds =join(deseq_dir, "{assembly}.deseq2.rds") #r data object
    params:
        samples=config["get_data"]["program_params"]["samples"]
    conda:
        "env_1.18.yml"
    log:
        join(logs_dir,  'deseq2', "{assembly}.deseq2.init.log")
    benchmark:
        join(logs_dir,  'deseq2', "{assembly}.deseq2.init.benchmark")
    threads: get_deseq2_threads()
    script:
        "deseq2-init.R"

rule deseq2_pca:
    input:
        join(deseq_dir, "{assembly}.deseq2.rds")
    output:
        join(deseq_dir, "{assembly}.deseq2.pca.pdf")
        #report(join(deseq_dir, "{assembly}.deseq2.pca.pdf"), "../../report/pca.rst")
    params:
        pca_labels=deseq_params["pca"]["labels"]
    conda:
        "env_1.18.yml" 
    log:
        join(logs_dir, 'deseq2', "{assembly}.deseq2.pca.log")
    benchmark:
        join(logs_dir, 'deseq2', "{assembly}.deseq2.pca.benchmark")
    script:
        "deseq2_plot_pca.R"


def get_contrast(wildcards):
    return deseq_params["contrasts"][wildcards.contrast]


rule deseq2:
    input:
        join(deseq_dir, "{assembly}.deseq2.rds")
    output:
        table=join(deseq_dir,"{assembly}.c{contrast}.deseq2.tsv"),
        sigTable=join(deseq_dir,"{assembly}.c{contrast}.deseq2.padj_0.1.tsv"),
        ma_plot=join(deseq_dir, "{assembly}.c{contrast}.deseq2.ma-plot.pdf"),
        #table=report(join(deseq_dir,"{contrast}.diffexp.tsv", "../../report/diffexp.rst")),
        #ma_plot=report(join(deseq_dir, "{contrast}.ma-plot.pdf", "../../report/ma.rst")),
    params:
        contrast=get_contrast
    conda:
        "env_1.18.yml" 
    log:
        join(logs_dir, 'deseq2', "{assembly}.c{contrast}.deseq2.log")
    benchmark:
        join(logs_dir, 'deseq2', "{assembly}.c{contrast}.deseq2.benchmark")
    threads: get_deseq2_threads
    script:
        "deseq2.R"

