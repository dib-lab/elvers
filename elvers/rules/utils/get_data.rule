import os

logs_dir  = config['elvers_directories']['logs']
data_dir = config['elvers_directories']['outdirs']['input_data']
# alternate, valid way to specify same dir:
#data_dir = config['get_data']['elvers_params']['outputs']['outdir']

get_data_params = config['get_data']['program_params']

if get_data_params.get('download_data'):
    if get_data_params.get('use_ftp'):
        localrules: ftp_get_fq1, ftp_get_fq2
        rule ftp_get_fq1:
            input: lambda wildcards: FTP.remote("{}".format(samples.loc[(wildcards.sample,wildcards.unit), "fq1"]), static=True, keep_local=True, immediate_close=True)
            output: join(data_dir,"{sample}_{unit}_1.fq.gz")
            log: join(logs_dir,"get_data", "{sample}_{unit}_1.ftp")
            shell: "mv {input} {output} 2> {log}"
        rule ftp_get_fq2:
            input: lambda wildcards: FTP.remote("{}".format(samples.loc[(wildcards.sample,wildcards.unit), "fq2"]), static=True, keep_local=True, immediate_close=True)
            output: join(data_dir,"{sample}_{unit}_2.fq.gz")
            log: join(logs_dir,"get_data", "{sample}_{unit}_2.ftp")
            shell: "mv {input} {output} 2> {log}"
    else:
        localrules: http_get_fq1, http_get_fq2
        rule http_get_fq1:
            input: lambda wildcards: HTTP.remote("{}".format(samples.loc[(wildcards.sample,wildcards.unit), "fq1"]), static=True, keep_local=True, allow_redirects=True)
            output: join(data_dir,"{sample}_{unit}_1.fq.gz")
            log: join(logs_dir,"get_data", "{sample}_{unit}_1.http")
            shell: "mv {input} {output} 2> {log}"

        rule http_get_fq2:
            input: lambda wildcards: HTTP.remote("{}".format(samples.loc[(wildcards.sample,wildcards.unit), "fq2"]), static=True, keep_local=True, allow_redirects=True)
            output: join(data_dir,"{sample}_{unit}_2.fq.gz")
            log: join(logs_dir,"get_data", "{sample}_{unit}_2.http")
            shell: "mv {input} {output} 2> {log}"

else:
    rule link_fq1:
        input: lambda wildcards:"{}".format(samples.loc[(wildcards.sample,wildcards.unit), "fq1"])
        output: join(data_dir,"{sample}_{unit}_1.fq.gz")
        log: join(logs_dir,"get_data", "{sample}_{unit}_1.link")
        run:
            full_input = os.path.abspath(str(input))
            full_output = os.path.abspath(str(output))
            shell("ln -s {full_input} {full_output} 2> {log}")

    rule link_fq2:
        input: lambda wildcards:"{}".format(samples.loc[(wildcards.sample,wildcards.unit), "fq2"])
        output: join(data_dir,"{sample}_{unit}_2.fq.gz")
        log: join(logs_dir,"get_data", "{sample}_{unit}_2.link")
        run:
            full_input = os.path.abspath(str(input))
            full_output = os.path.abspath(str(output))
            shell("ln -s {full_input} {full_output} 2> {log}")
