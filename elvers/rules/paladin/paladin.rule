import os
from os.path import join

logs_dir  = config['elvers_directories']['logs']
assembly_dir  = config['elvers_directories']['outdirs']['assemble']

ep_params = config['paladin']['elvers_params']
prog_params = config['paladin']['program_params']
index_params = prog_params['index_params']
alignment_params = prog_params['alignment_params']

# get outdir
paladin_dir = ep_params['outputs']['outdir']
assembly_extension = ep_params['outputs']['paladin_mapped']['extensions']['reference_extensions'][0]

def get_paladin_input(w):
    readsD = {}
    inputs = prog_params['inputs']
    if not is_single_end(**w): 
        if 'pear_merged' in inputs:
            input_dir = join(config['elvers_directories']['outdirs']['preprocess'], 'pear')
            ext = '.pear_assembled.fq.gz' # requires pear merging of pe reads
        elif 'trimmed' in inputs:
            input_dir = config['elvers_directories']['outdirs']['preprocess']
            ext = '_1.trim.fq.gz'
        elif 'raw' in inputs:
            ext = '_1.fq.gz'
            input_dir = config['elvers_directories']['outdirs']['input_data']
        readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
        return readsD
    elif 'trimmed' in inputs: 
        input_dir = config['elvers_directories']['outdirs']['preprocess']
        ext = '.trim.fq.gz'
    elif 'raw' in inputs:
        ext = '_1.fq.gz'
        input_dir = config['elvers_directories']['outdirs']['input_data']
    readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
    return readsD

rule paladin_index:
    input: join(assembly_dir, "{assembly}.fasta")
    output: join(paladin_dir, "{assembly}.fasta.bwt"),
    params: 
        reference_type= index_params.get('reference_type', '3'),
        gff = index_params.get('gff_file', '')
    log: join(logs_dir, 'paladin', "{assembly}_index.log"),
    benchmark: join(logs_dir, 'paladin', "{assembly}_index.benchmark"),
    conda: "environment.yml"
    script: 'paladin-index.py'
   
rule paladin_align:
    input:  
        unpack(get_paladin_input),
        index = join(paladin_dir, "{assembly}.fasta.bwt"), 
    output: 
        join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.bam"),
    threads: 20
    params:
        f = alignment_params.get('f','125'),
        extra = alignment_params.get('extra', '')
    log: join(logs_dir, 'paladin', "{sample}_{unit}_x_{assembly}.paladin.log"),
    benchmark: join(logs_dir, 'paladin', "{sample}_{unit}_x_{assembly}.paladin.benchmark"),
    conda: "environment.yml"
    script: 'paladin-align.py'
    
rule samtools_sort_paladin:
    input: join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.bam")
    output: join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam") 
    conda: "environment.yml"
    log: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.log")
    benchmark: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.benchmark")
    threads: 5
    shell:"""
    samtools sort -@ {threads} {input} -o {output}
    """

rule samtools_flagstat_paladin:
    input: join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam") 
    output: join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam.flagstat")
    log: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.flagstat.log")
    benchmark: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.flagstat.benchmark")
    conda: "environment.yml"
    shell:"""
    samtools flagstat {input} > {output}
    """
    
rule samtools_index_paladin:
    input: join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam") 
    output: join(paladin_dir,"{sample}_{unit}_x_{assembly}.paladin.sort.bam.bai")
    conda: "environment.yml"
    log: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.index.log")
    benchmark: join(logs_dir, 'paladin',"{sample}_{unit}_x_{assembly}.paladin.sort.bam.index.benchmark")
    shell:"""
    samtools index {input}
    """
