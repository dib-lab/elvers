from os.path import join

logs_dir  = config['elvers_directories']['logs']
khmer_elvers_params = config["khmer"]['elvers_params']
khmer_prog_params = config["khmer"]['program_params']

# set output dir
khmer_output_dir = khmer_elvers_params['outputs']['outdir']
# set default input dir, extensions
khmer_input_dir = config['elvers_directories']['outdirs']['preprocess']
khmer_ext = ['.trim.fq.gz']
# get input we're using in this case
khmer_input_name = khmer_prog_params.get('inputs', ['trimmed'])[0]
# update input_dir, ext
khmer_input_dir = khmer_elvers_params['input_options'][khmer_input_name].get('indir', khmer_input_dir )
khmer_ext = khmer_elvers_params['input_options'][khmer_input_name]['extensions']['read'].get('common_ext', khmer_ext)[0]

diginorm = khmer_prog_params.get('diginorm', True)

def get_reads(w):
    readsD = {}
    if not is_single_end(**w):
        readsD['r1'] = expand(join(khmer_input_dir, '{sample}_{unit}_1{ext}'),**w, ext=khmer_ext)
        readsD['r2'] = expand(join(khmer_input_dir, '{sample}_{unit}_2{ext}'),**w, ext=khmer_ext)
        # conflict with se pattern matching. Also just take extra time for little benefit
        #readsD['r1_unpaired'] = expand(join(khmer_input_dir, "{sample}_{unit}_1.se.trim.fq.gz"),**w)
        #readsD['r2_unpaired'] = expand(join(khmer_input_dir, "{sample}_{unit}_2.se.trim.fq.gz") **w)
        return readsD
    return expand(join(khmer_input_dir, '{sample}_{unit}.se{ext}'), **w, ext=khmer_ext)


if diginorm:
    rule khmer_pe_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: unpack(get_reads)
        output: 
            paired=join(khmer_output_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            single=join(khmer_output_dir,'{sample}_{unit}.single.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_prog_params.get('ksize', 20),
            Z = khmer_prog_params.get('Z', 18), 
            C = khmer_prog_params.get('C', 3), 
            memory = khmer_prog_params.get('memory', 4e9),
            cov = khmer_prog_params.get('coverage', 20),
            extra = khmer_prog_params.get('extra', '')
        threads: 10
        log: join(logs_dir, 'khmer/{sample}_{unit}.pe.diginorm.log')
        benchmark: join(logs_dir, 'khmer/{sample}_{unit}.pe.diginorm.benchmark')
        conda:  'environment.yml'
        shell: " (interleave-reads.py {input.r1} {input.r2} ) | "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory} "
               " --diginorm --diginorm-coverage={params.cov}) | (extract-paired-reads.py --gzip "
               " -p {output.paired} -s {output.single}) > {log}"
        #shell: " (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_unpaired} {input.r2_unpaired}) | "

    rule khmer_se_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: get_reads
        output: join(khmer_output_dir, '{sample}_{unit}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_prog_params['ksize'],
            Z = khmer_prog_params['Z'],
            C = khmer_prog_params['C'],
            memory = khmer_prog_params['memory'],
            cov = khmer_prog_params['coverage'],
            extra = khmer_prog_params['extra']
        threads: 2
        log: join(logs_dir, 'khmer/{sample}_{unit}.se.diginorm.log')
        benchmark: join(logs_dir, 'khmer/{sample}_{unit}.se.diginorm.benchmark')
        conda: 'environment.yml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory} --diginorm --diginorm-coverage={params.cov} ) "
    
else:
    rule khmer_pe_no_diginorm:
        """
        kmer trim with khmer, no diginorm
        """
        input: unpack(get_reads)
        output: 
            paired=join(khmer_output_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            single=join(khmer_output_dir,'{sample}_{unit}.single.khmer.fq.gz'),
        message: """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_prog_params.get('ksize', 20),
            Z = khmer_prog_params.get('Z', 18),
            C = khmer_prog_params.get('C', 3),
            memory = khmer_prog_params.get('memory', 4e9),
            extra = khmer_prog_params.get('extra', '')
        threads: 10
        log: join(logs_dir, 'khmer/{sample}_{unit}.pe.log')
        benchmark: join(logs_dir, 'khmer/{sample}_{unit}.pe.benchmark')
        conda:  'environment.yml'
        shell: " (interleave-reads.py {input.r1} {input.r2} )| "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory})"
               " | (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > {log}"

    rule khmer_se_no_diginorm:
        """
        khmer trim se, no diginorm
        """
        input: get_reads
        output: join(khmer_output_dir, '{sample}_{unit}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_prog_params['ksize'],
            Z = khmer_prog_params['Z'],
            C = khmer_prog_params['C'],
            memory = khmer_prog_params['memory'],
            extra = khmer_prog_params['extra']
        threads: 2
        log: join(logs_dir, 'khmer/{sample}_{unit}.se.log')
        benchmark: join(logs_dir, 'khmer/{sample}_{unit}.se.benchmark')
        conda: 'environment.yml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory}) "



rule khmer_split_paired:
    input: join(khmer_output_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
    output:
        r1=join(khmer_output_dir, '{sample}_{unit}_1.khmer.fq.gz'),
        r2=join(khmer_output_dir, '{sample}_{unit}_2.khmer.fq.gz'),
    threads: 2 
    log: join(logs_dir, 'khmer/{sample}_{unit}.split_pe.log')
    benchmark: join(logs_dir, 'khmer/{sample}_{unit}.split_pe.benchmark')
    conda: "environment.yml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """


