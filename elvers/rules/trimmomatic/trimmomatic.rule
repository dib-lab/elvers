from os.path import join

prog = "trimmomatic"

logs_dir  = config['elvers_directories']['logs']
elvers_params = config[prog]['elvers_params']
prog_params = config[prog]['program_params']

# set output dir
#output_dir = elvers_params['outputs']['outdir']
output_dir = os.path.dirname(elvers_params['outputs']['output_files'][0])
# set default input dir, extensions
input_dir = config['elvers_directories']['outdirs']['input_data']
ext = '.fq.gz'
# get input we're using in this case
input_name = prog_params.get('input', 'raw').lower()
# update input_dir, ext
input_dir = elvers_params['input_options'][input_name].get('indir', input_dir)
ext = elvers_params['input_options'][input_name]['extensions']['read'].get('common_ext', ext)

# find adapters --> use utils/find_input_file for this?
base_dir = config['elvers_directories']['base_dir']
pe_adapter = prog_params['adapter_file']['pe_path']
se_adapter = prog_params['adapter_file']['se_path']

if not os.path.isabs(pe_adapter):
    pe_adapter = join(base_dir, pe_adapter)
if not os.path.isabs(se_adapter):
    se_adapter = join(base_dir, se_adapter)

def get_pretrim(w):
    readsD = {}
    if not is_single_end(**w):
        readsD['r1'] = expand(join(data_dir, '{sample}_{unit}_1.fq.gz'),**w)
        readsD['r2'] = expand(join(data_dir, '{sample}_{unit}_2.fq.gz'),**w)
        return readsD
    return expand(join(data_dir, '{sample}_{unit}_1.fq.gz'), **w)

rule trimmomatic_pe:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        unpack(get_pretrim)
    output:
        r1=join(output_dir, "{sample}_{unit}_1.trim.fq.gz"),
        r2=join(output_dir, "{sample}_{unit}_2.trim.fq.gz"),
        r1_unpaired=join(output_dir, "{sample}_{unit}_1.se.trim.fq.gz"),
        r2_unpaired=join(output_dir, "{sample}_{unit}_2.se.trim.fq.gz"),
    message:
        """--- Quality trimming PE read data with Trimmomatic. --- Output files will be in {output_dir} """
    threads: prog_params.get('cpu', 16)
    params:
        trimmer = (prog_params['trim_cmd'].format(pe_adapter)).split(' '),
        extra = prog_params.get('extra', '')
    log: join(logs_dir, 'trimmomatic/{sample}_{unit}_pe.log')
    benchmark: join(logs_dir, 'trimmomatic/{sample}_{unit}_pe.benchmark')
    conda: 'environment.yml'
    script:
        'trimmomatic-pe.py'

rule trimmomatic_se:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        get_pretrim
    output:
        r1=join(output_dir, "{sample}_{unit}_se.trim.fq.gz"), 
    message:
        """--- Quality trimming SE read data with Trimmomatic."""
    threads: prog_params.get('cpu', 16)
    params:
        trimmer = (prog_params['trim_cmd'].format(se_adapter)).split(' '),
        extra = prog_params.get('extra', '')
    log:join(logs_dir, 'trimmomatic/{sample}_{unit}_se.log')
    benchmark:join(logs_dir, 'trimmomatic/{sample}_{unit}_se.benchmark')
    conda: 'environment.yml'
    script:
        'trimmomatic-se.py'

