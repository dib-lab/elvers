from os.path import join
from ep_utils.utils import get_params

# default params from local yaml params file
#rcorrector_params = get_params('rcorrector')
# override defaults with snakemake config (main configfile or snakemake --config)
#if 'rcorrector' in config.keys():
#    rcorr_params.update(config['rcorrector']) 

data_dir    = config['eelpond_directories']['outdirs']['input_data']

rcorr_params = config['rcorrector']['program_params']
ep_params = config['rcorrector']['eelpond_params']

# get inputs
input_dirname = ep_params['input_dir']
input_dir     = config['eelpond_directories']['outdirs'][input_dirname]
ext           = ep_params['input_pattern']
#combine_units = ep_params['extensions']['read']['combine_units']

# get outdir
rcorr_dir     = ep_params['outdir']

# use if you don't want to collapse technical replicates ("units" column)
def get_sample_no_combine(w):
    readsD = {}
    if not is_single_end(**w): # note, this requires unit to be in outputs!
        readsD['r1'] = join(input_dir, f'{w.sample}_{w.unit}_1{ext}')
        readsD['r2'] = join(input_dir, f'{w.sample}_{w.unit}_2{ext}')
        return readsD
    readsD['r'] = join(input_dir, f'{w.sample}_{w.unit}{ext}')
    return readsD

#def get_sample_combine_units(w):
#    readsD = {}
#    r1,r2,r = [],[],[]
#    unit_list = samples.groupby(level=0).get_group(w.sample)['unit'].tolist()
#    for unit in unit_list:
#        if not is_single_end(w.sample, unit):
#            r1+= [join(input_dir, f"{w.sample}_{unit}_1{ext}")]
#            r2+= [join(input_dir, f"{w.sample}_{unit}_2{ext}")]
#        else:
#            r+= [join(input_dir, f"{w.sample}_{unit}{ext}")]
#    if r1:
#        readsD['r1'] = r1
#        readsD['r2'] = r2
#    elif r:
        # can't handle mixed pe/se samples, so if there are samples with some se, some pe, this will only do quant for pe
#        readsD['r'] = r
#    return readsD

rule rcorrector_pe:
    """
    Run Rcorrector
    """
    input:
        unpack(get_sample_no_combine)
    output:
        r1=join(rcorr_dir, "{sample}_{unit}_1.rcorr.fq.gz"),
        r2=join(rcorr_dir, "{sample}_{unit}_2.rcorr.fq.gz"),
    message:
        """--- PE Rcorrector ---"""
    params:
        extra = '' 
    log:join(LOGS_DIR, 'rcorrector', '{sample}_{unit}_pe.log')
    benchmark:join(LOGS_DIR, 'rcorrector','{sample}_{unit}_pe.benchmark')
    conda: "rcorrector-env.yaml"
	script: "rcorrector-wrapper.py"

rule rcorrector_se:
    """
    Run Rcorrector
    """
    input:
        unpack(get_sample_no_combine)
    output:
        r=join(rcorr_dir, "{sample}_{unit}.se.rcorr.fq.gz")
    message:
        """--- Running Rcorrector ---"""
    params:
        extra = rcorr_params.get('extra', '')
    threads: 20
    log:   join(LOGS_DIR, 'rcorrector', '{sample}_{unit}_se.log')
    benchmark:   join(LOGS_DIR, 'rcorrector','{sample}_{unit}_se.benchmark')
    conda: "rcorrector-env.yaml"
	script: "rcorrector-wrapper.py"

