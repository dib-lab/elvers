from os.path import join

ep_params = config['plass']['eelpond_params']
assembly_params = config['plass']['program_params']

assembly_dir = ep_params['outdir']
assembly_extension = ep_params['extensions']['assembly_extensions'][0] # should only be a single entry here, default: '_plass'

def get_assembly_input(w):
    r1,r2,single =[],[],[]
    readsD = {}
    if assembly_params.get('input_kmer_trimmed', True):
        ext = '.khmer.fq.gz' 
        input_dir = config['eelpond_directories']['outdirs']['preprocess']
    elif assembly_params.get('input_trimmomatic_trimmed', True):
        ext = '.trim.fq.gz'
        input_dir = config['eelpond_directories']['outdirs']['preprocess']
    else:
        ext = '.fq.gz'
        input_dir = config['eelpond_directories']['outdirs']['link_data']
    for s, u in samples.iterrows():
        sample, unit = u['sample'],u['unit']
        if is_single_end(sample, unit):
            single+=[join(input_dir, f"{sample}_{unit}{ext}")]
        else:
            r1+= [join(input_dir, f"{sample}_{unit}_1{ext}")]
            r2+= [join(input_dir, f"{sample}_{unit}_2{ext}")]
    add_single = assembly_params.get('add_single_to_paired', False)
    if len(r1) > 0:
        if add_single == True:
            r1 = r1 + single
        readsD['left'] = r1
        readsD['right'] = r2
    else:
        readsD['left'] = single
    return readsD

rule plass:
    input:
        unpack(get_assembly_input)
    output:
        fasta = join(assembly_dir, BASE + assembly_extension + '.fasta') 
    message:
        """--- Assembling read data with PLASS --- """
    params:
        # optional parameters
        extra=assembly_params.get('extra', '')
    log: join(LOGS_DIR, 'plass','plass.log')
    benchmark: join(LOGS_DIR, 'plass','plass.benchmark')
    threads: 32
    conda: "plass-env.yaml"
	script: "plass-wrapper.py"
