from os.path import join

trim_dir    = config['eelpond_directories']['outdirs']['preprocess']
khmer_dir = config['khmer']['eelpond_params']['outdir']
khmer_params = config['khmer']['program_params']
diginorm = khmer_params.get('diginorm', True)

def get_trimmed(w):
    readsD = {}
    if not is_single_end(**w):
        readsD['r1'] = expand(join(trim_dir, '{sample}_{unit}_1.trim.fq.gz'),**w)
        readsD['r2'] = expand(join(trim_dir, '{sample}_{unit}_2.trim.fq.gz'),**w)
        # conflict with se pattern matching. Also just take extra time for little benefit
        #readsD['r1_unpaired'] = expand(join(trim_dir, "{sample}_{unit}_1.se.trim.fq.gz"),**w)
        #readsD['r2_unpaired'] = expand(join(trim_dir, "{sample}_{unit}_2.se.trim.fq.gz") **w)
        return readsD
    return expand(join(trim_dir, '{sample}_{unit}.se.trim.fq.gz'), **w)


if diginorm:
    rule khmer_pe_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: unpack(get_trimmed)
        output: 
            paired=join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            single=join(khmer_dir,'{sample}_{unit}.single.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_params.get('ksize', 20),
            Z = khmer_params.get('Z', 18), 
            C = khmer_params.get('C', 3), 
            memory = khmer_params.get('memory', 4e9),
            cov = khmer_params.get('coverage', 20),
            extra = khmer_params.get('extra', '')
        threads: 10
        log: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.diginorm.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.diginorm.benchmark')
        conda:  'khmer-env.yaml'
        shell: " (interleave-reads.py {input.r1} {input.r2} ) | "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory} "
               " --diginorm --diginorm-coverage={params.cov}) | (extract-paired-reads.py --gzip "
               " -p {output.paired} -s {output.single}) > {log}"
        #shell: " (interleave-reads.py {input.r1} {input.r2} && zcat {input.r1_unpaired} {input.r2_unpaired}) | "

    rule khmer_se_diginorm:
        """
        kmer trim and diginorm with khmer
        """
        input: get_trimmed
        output: join(khmer_dir, '{sample}_{unit}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers and digital normalization ---"""
        params:
            k = khmer_params['ksize'],
            Z = khmer_params['Z'],
            C = khmer_params['C'],
            memory = khmer_params['memory'],
            cov = khmer_params['coverage'],
            extra = khmer_params['extra']
        threads: 2
        log: join(LOGS_DIR, 'khmer/{sample}_{unit}.se.diginorm.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.se.diginorm.benchmark')
        conda: 'khmer-env.yaml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory} --diginorm --diginorm-coverage={params.cov} ) "
    
else:
    rule khmer_pe_no_diginorm:
        """
        kmer trim with khmer, no diginorm
        """
        input: unpack(get_trimmed)
        output: 
            paired=join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
            single=join(khmer_dir,'{sample}_{unit}.single.khmer.fq.gz'),
        message: """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_params.get('ksize', 20),
            Z = khmer_params.get('Z', 18), 
            C = khmer_params.get('C', 3), 
            memory = khmer_params.get('memory', 4e9),
            extra = khmer_params.get('extra', '')
        threads: 10
        log: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.pe.benchmark')
        conda:  'khmer-env.yaml'
        shell: " (interleave-reads.py {input.r1} {input.r2} )| "
               " (trim-low-abund.py -V -k {params.k} -Z {params.Z} -C {params.C} - -o - -M {params.memory})"
               " | (extract-paired-reads.py --gzip -p {output.paired} -s {output.single}) > {log}"

    rule khmer_se_no_diginorm:
        """
        khmer trim se, no diginorm
        """
        input: get_trimmed
        output: join(khmer_dir, '{sample}_{unit}.se.khmer.fq.gz'),
        message:
            """--- khmer trimming of low-abundance kmers ---"""
        params:
            k = khmer_params['ksize'],
            Z = khmer_params['Z'],
            C = khmer_params['C'],
            memory = khmer_params['memory'],
            extra = khmer_params['extra']
        threads: 2
        log: join(LOGS_DIR, 'khmer/{sample}_{unit}.se.log')
        benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.se.benchmark')
        conda: 'khmer-env.yaml'
        shell:
               "(trim-low-abund.py {input} -V -k {params.k} -Z {params.Z} -C {params.C} -o {output} "
               " -M {params.memory}) "



rule khmer_split_paired:
    input: join(khmer_dir,'{sample}_{unit}.paired.khmer.fq.gz'),
    output:
        r1=join(khmer_dir, '{sample}_{unit}_1.khmer.fq.gz'),
        r2=join(khmer_dir, '{sample}_{unit}_2.khmer.fq.gz'),
    threads: 2 
    log: join(LOGS_DIR, 'khmer/{sample}_{unit}.split_pe.log')
    benchmark: join(LOGS_DIR, 'khmer/{sample}_{unit}.split_pe.benchmark')
    conda: "khmer-env.yaml"
    shell: """
        split-paired-reads.py {input} --gzip -1 {output.r1} -2 {output.r2} >> {log}
        """


