from os.path import join

data_dir    = config['eelpond_directories']['outdirs']['input_data']
trim_params = config['trimmomatic']['program_params']
trim_dir    = config['trimmomatic']['eelpond_params']['outdir']

base_dir = config['eelpond_directories']['base_dir']

pe_adapter = trim_params['adapter_file']['pe_path']
se_adapter = trim_params['adapter_file']['se_path']

if not os.path.isabs(pe_adapter):
    pe_adapter = join(base_dir, pe_adapter)
if not os.path.isabs(se_adapter):
    se_adapter = join(base_dir, se_adapter)

def get_pretrim(w):
    readsD = {}
    if not is_single_end(**w):
        readsD['r1'] = expand(join(data_dir, '{sample}_{unit}_1.fq.gz'),**w)
        readsD['r2'] = expand(join(data_dir, '{sample}_{unit}_2.fq.gz'),**w)
        return readsD
    return expand(join(data_dir, '{sample}_{unit}_1.fq.gz'), **w)

rule trimmomatic_pe:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        unpack(get_pretrim)
    output:
        r1=join(trim_dir, "{sample}_{unit}_1.trim.fq.gz"),
        r2=join(trim_dir, "{sample}_{unit}_2.trim.fq.gz"),
        r1_unpaired=join(trim_dir, "{sample}_{unit}_1.se.trim.fq.gz"),
        r2_unpaired=join(trim_dir, "{sample}_{unit}_2.se.trim.fq.gz"),
    message:
        """--- Quality trimming PE read data with Trimmomatic. --- Output files will be in {trim_dir} """
    threads: trim_params.get('cpu', 16)
    params:
        trimmer = (trim_params['trim_cmd'].format(pe_adapter)).split(' '),
        extra = trim_params.get('extra', '')
    log: join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_pe.log')
    benchmark: join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_pe.benchmark')
    conda: 'trimmomatic-env.yaml'
    script:
        'trimmomatic-pe.py'

rule trimmomatic_se:
    """
    Trim reads from the sequencer by trimming or dropping low-quality reads.
    """
    input:
        get_pretrim
    output:
        r1=join(trim_dir, "{sample}_{unit}_se.trim.fq.gz"), 
    message:
        """--- Quality trimming SE read data with Trimmomatic."""
    threads: trim_params.get('cpu', 16)
    params:
        trimmer = (trim_params['trim_cmd'].format(se_adapter)).split(' '),
        extra = trim_params.get('extra', '')
    log:join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_se.log')
    benchmark:join(LOGS_DIR, 'trimmomatic/{sample}_{unit}_se.benchmark')
    conda: 'trimmomatic-env.yaml'
    script:
        'trimmomatic-se.py'

